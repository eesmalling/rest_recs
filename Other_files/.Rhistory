I(minority^2)+I(female^2)+I(female_rank^2)+I(unemployed^2)+
I(income^2)+I(nodegree^2)+I(bachelor^2)+I(inactivity^2)+
I(obesity^2)+I(density^2)+I(cancer^2), data=dta)
summary(mdl_hi)
BIC(mdl_hi)
bics <- c(BIC(model1),BIC(model2),BIC(model3),BIC(model4),BIC(model5))
bics
?step
model6 <- step(mdl_hi, direction="backward")
summary(model6)
summary(mdl_hi)
2955-2912
#model6 <- step(mdl_hi, direction="backward", trace=0)
aics <- c(AIC(model1),AIC(model2),AIC(model3),AIC(model4),AIC(model5),AIC(model6))
names(aics) <- c("model1","model2","model3","model4","model5","model6"); aics
sample(1:10, 20)
sample(1:10, 20, replace=TRUE)
fold <- sample(1:10, nrow(dta), replace=TRUE)
mses <- tibble(model1 = numeric(10), model2 = numeric(10), model3 = numeric(10),
model4 = numeric(10), model5 = numeric(10), model6 = numeric(10))
for (i in 1:10){
train <- dta[fold==i,]; val <- dta[fold!=i,]
model <- update(model1, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model1[i] <- sum(resids^2)/nrow(test)
model <- update(model2, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model2[i] <- sum(resids^2)/nrow(test)
model <- update(model3, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model3[i] <- sum(resids^2)/nrow(test)
model <- update(model4, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model4[i] <- sum(resids^2)/nrow(test)
model <- update(model5, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model5[i] <- sum(resids^2)/nrow(test)
model <- update(model6, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model6[i] <- sum(resids^2)/nrow(test)
paste(i)
}
mses
folds
fold
i <- 3
train <- dta[fold==i,]; val <- dta[fold!=i,]
model <- update(model1, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model1[i] <- sum(resids^2)/nrow(test)
sum(resids^2)/nrow(test)
resids
nrow(test)
fold <- sample(1:10, nrow(dta), replace=TRUE)
mses <- tibble(model1 = numeric(10), model2 = numeric(10), model3 = numeric(10),
model4 = numeric(10), model5 = numeric(10), model6 = numeric(10))
for (i in 1:10){
train <- dta[fold==i,]; val <- dta[fold!=i,]
model <- update(model1, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model1[i] <- sum(resids^2)/nrow(val)
model <- update(model2, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model2[i] <- sum(resids^2)/nrow(val)
model <- update(model3, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model3[i] <- sum(resids^2)/nrow(val)
model <- update(model4, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model4[i] <- sum(resids^2)/nrow(val)
model <- update(model5, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model5[i] <- sum(resids^2)/nrow(val)
model <- update(model6, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model6[i] <- sum(resids^2)/nrow(val)
paste(i)
}
View(count(dta, state))
library(forcats)
fct_lump(dta$state, 10)
dta <- mutate(dta, female_rank = rank(-female)/nrow(dta),
state = fct_lump(state, 25))
mdl_hi <- lm(votergap~.+(.-state)^2+I(population^2)+I(hispanic^2)+
I(minority^2)+I(female^2)+I(female_rank^2)+I(unemployed^2)+
I(income^2)+I(nodegree^2)+I(bachelor^2)+I(inactivity^2)+
I(obesity^2)+I(density^2)+I(cancer^2), data=dta)
summary(mdl_hi)
?fct_lump
dta <- mutate(dta, female_rank = rank(-female)/nrow(dta),
state = fct_lump(state, 25), other_level="AAA_Other")
mdl_hi <- lm(votergap~.+(.-state)^2+I(population^2)+I(hispanic^2)+
I(minority^2)+I(female^2)+I(female_rank^2)+I(unemployed^2)+
I(income^2)+I(nodegree^2)+I(bachelor^2)+I(inactivity^2)+
I(obesity^2)+I(density^2)+I(cancer^2), data=dta)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
library(forcats)
dta4 <- read_csv("county_level_election.csv") %>% na.omit()
cis <- tibble(low = numeric(2000), high = numeric(2000))
for (i in 1:2000){
dta <- tibble(x=runif(50), err=rnorm(50,0,3), y=x+2+err)
mdl <- lm(y~x, data=dta)
cis$low[i] <- confint(mdl, "x", .95)[1]
cis$high[i] <- confint(mdl, "x", .95)[2]
}
cis <- mutate(cis, covered=low<1 & high>1, power=low<0 & high>0)
paste("Coverage probability:", mean(cis$covered))
paste("Power of t-test:", 1-mean(cis$power))
ggplot(dta4) + geom_histogram(aes(votergap), bins=30)
ggplot(dta4) + geom_histogram(aes(female), bins=30)
ggplot(dta4) + geom_point(aes(female, votergap), size=.1)
ggplot(dta4) + geom_histogram(aes(population), bins=30)
ggplot(dta4) + geom_histogram(aes(log(population)), bins=30)
ggplot(dta4) + geom_point(aes(log(population), votergap), size=.1)
ggplot(dta4) + geom_histogram(aes(hispanic), bins=30)
ggplot(dta4) + geom_histogram(aes(log(hispanic)), bins=30)
ggplot(dta4) + geom_point(aes(log(hispanic), votergap), size=.1)
ggplot(dta4) + geom_histogram(aes(minority), bins=30)
ggplot(dta4) + geom_histogram(aes(log(minority)), bins=30)
ggplot(dta4) + geom_point(aes(log(minority), votergap), size=.1)
ggplot(dta4) + geom_histogram(aes(unemployed), bins=30)
ggplot(dta4) + geom_histogram(aes(log(unemployed)), bins=30)
ggplot(dta4) + geom_point(aes(log(unemployed), votergap), size=.1)
ggplot(dta4) + geom_histogram(aes(income), bins=30)
ggplot(dta4) + geom_histogram(aes(log(income)), bins=30)
ggplot(dta4) + geom_point(aes(log(income), votergap), size=.1)
ggplot(dta4) + geom_histogram(aes(nodegree), bins=30)
ggplot(dta4) + geom_histogram(aes(log(nodegree)), bins=30)
ggplot(dta4) + geom_point(aes(log(nodegree), votergap), size=.1)
ggplot(dta4) + geom_histogram(aes(bachelor), bins=30)
ggplot(dta4) + geom_histogram(aes(log(bachelor)), bins=30)
ggplot(dta4) + geom_point(aes(log(bachelor), votergap), size=.1)
ggplot(dta4) + geom_histogram(aes(density), bins=30)
ggplot(dta4) + geom_histogram(aes(log(density)), bins=30)
ggplot(dta4) + geom_point(aes(log(density), votergap), size=.1)
ggplot(dta4) + geom_histogram(aes(inactivity), bins=30)
ggplot(dta4) + geom_histogram(aes(obesity), bins=30)
ggplot(dta4) + geom_histogram(aes(cancer), bins=30)
ggplot(dta4) + geom_point(aes(inactivity, votergap), size=.1)
ggplot(dta4) + geom_point(aes(obesity, votergap), size=.1)
ggplot(dta4) + geom_point(aes(cancer, votergap), size=.1)
dta <- mutate(dta4, population=log(population), hispanic=log(hispanic),
minority=log(minority), unemployed=log(unemployed),
income=log(income), nodegree=log(nodegree),
bachelor=log(bachelor), density=log(density)) %>%
select(state, population:votergap)
model1 <- lm(votergap~.-state, data=dta)
summary(model1)
plot(model1, which=2)
plot(model1, which=1)
ggplot() + geom_point(aes(dta$population, model1$residuals), size=.1)
ggplot() + geom_point(aes(dta$female, model1$residuals), size=.1)
mdl <- lm(votergap~minority+I(minority^2), data=dta)
summary(mdl)$coefficients
max_val <- -mdl$coefficients[2]/(2*mdl$coefficients[3])
paste("Maximizing value of log(minority) =", max_val)
paste("Maximizing value of minority =",exp(max_val))
paste("Maximum value of votergap =", predict(mdl, data.frame(minority=max_val)))
ggplot(add_predictions(dta,mdl)) + geom_point(aes(minority, votergap), size=.1) +
geom_line(aes(minority, pred), color="red")
model2 <- lm(votergap~minority+obesity+female+female:(minority+obesity), data=dta)
summary(model2)$coefficients
model3 <- lm(votergap~obesity+minority+I(minority^2)+female+
female:(obesity+minority+I(minority^2)), data=dta)
summary(model3)
anova(model2, model3)
mdl_lo <- lm(votergap~1, data=dta)
mdl_hi <- lm(votergap~.-state, data=dta)
model4 <- step(mdl_lo, scope=list(upper=mdl_hi), direction="forward", trace=0)
summary(model4)
model5 <- lm(votergap~state, data=dta)
summary(model5)
dta <- mutate(dta, female_rank = rank(-female)/nrow(dta),
state = fct_lump(state, 25), other_level="AAA_Other")
mdl_hi <- lm(votergap~.+(.-state)^2+I(population^2)+I(hispanic^2)+
I(minority^2)+I(female^2)+I(female_rank^2)+I(unemployed^2)+
I(income^2)+I(nodegree^2)+I(bachelor^2)+I(inactivity^2)+
I(obesity^2)+I(density^2)+I(cancer^2), data=dta)
View(dta)
dta <- mutate(dta, female_rank = rank(-female)/nrow(dta),
state = fct_lump(state, 25))
mdl_hi <- lm(votergap~.+(.-state)^2+I(population^2)+I(hispanic^2)+
I(minority^2)+I(female^2)+I(female_rank^2)+I(unemployed^2)+
I(income^2)+I(nodegree^2)+I(bachelor^2)+I(inactivity^2)+
I(obesity^2)+I(density^2)+I(cancer^2), data=dta)
summary(dta$state)
type(dta$state)
class(dta$state)
dta
dta <- mutate(dta4, population=log(population), hispanic=log(hispanic),
minority=log(minority), unemployed=log(unemployed),
income=log(income), nodegree=log(nodegree),
bachelor=log(bachelor), density=log(density)) %>%
select(state, population:votergap)
dta <- mutate(dta, female_rank = rank(-female)/nrow(dta),
state = fct_lump(state, 25))
mdl_hi <- lm(votergap~.+(.-state)^2+I(population^2)+I(hispanic^2)+
I(minority^2)+I(female^2)+I(female_rank^2)+I(unemployed^2)+
I(income^2)+I(nodegree^2)+I(bachelor^2)+I(inactivity^2)+
I(obesity^2)+I(density^2)+I(cancer^2), data=dta)
summary(mdl_hi)
model6 <- step(mdl_hi, direction="backward", trace=0)
aics <- c(AIC(model1),AIC(model2),AIC(model3),AIC(model4),AIC(model5),AIC(model6))
names(aics) <- c("model1","model2","model3","model4","model5","model6"); aics
fold <- sample(1:10, nrow(dta), replace=TRUE)
mses <- tibble(model1 = numeric(10), model2 = numeric(10), model3 = numeric(10),
model4 = numeric(10), model5 = numeric(10), model6 = numeric(10))
for (i in 1:10){
train <- dta[fold==i,]; val <- dta[fold!=i,]
model <- update(model1, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model1[i] <- sum(resids^2)/nrow(val)
model <- update(model2, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model2[i] <- sum(resids^2)/nrow(val)
model <- update(model3, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model3[i] <- sum(resids^2)/nrow(val)
model <- update(model4, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model4[i] <- sum(resids^2)/nrow(val)
model <- update(model5, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model5[i] <- sum(resids^2)/nrow(val)
model <- update(model6, .~., data=train)
resids <- predict(model, val) - val$votergap
mses$model6[i] <- sum(resids^2)/nrow(val)
paste(i)
}
colMeans(mses)
summary(model6)
plot(model6)
plot(model6, which=3)
plot(model6, which=2)
plot(model6, which=1)
plot(model6, which=2)
plot(model6, which=1)
plot(model6, which=2)
plot(model6, which=1)
plot(model6, which=2)
plot(model6, which=1)
test <- tibble(x = rnorm(1000), z = rnorm(1000),
err = rnorm(1000, 0, 1), y = 2*x+3+err)
summary(lm(y~x+0, data=test))
summary(lm(y~x+z+0, data=test))
test <- tibble(x = rnorm(1000), z = rnorm(1000),
err = rnorm(1000, 0, 1), y = 2*x-z+3+err)
summary(lm(y~x+0, data=test))
summary(lm(y~x+z+0, data=test))
cor(test)
test <- tibble(x = runif(1000), z = runif(1000),
err = rnorm(1000, 0, 1), y = 2*x-z+3+err)
summary(lm(y~x+0, data=test))
summary(lm(y~x+z+0, data=test))
cor(test)
test <- tibble(x = rnorm(1000), z = rnorm(1000),
err = rnorm(1000, 0, 1), y = 2*x-z+3+err)
summary(lm(y~x+0, data=test))
summary(lm(y~x+z+0, data=test))
test <- tibble(x = rnorm(1000), z = rnorm(1000),
err = rnorm(1000, 0, 1), y = 2*x+3+err)
summary(lm(y~x+0, data=test))
summary(lm(y~x+z+0, data=test))
test <- tibble(x = rnorm(1000, 2), z = rnorm(1000, 1),
err = rnorm(1000, 0, 1), y = 2*x+3+err)
summary(lm(y~x+0, data=test))
summary(lm(y~x+z+0, data=test))
cor(test)
test <- tibble(x = rnorm(1000, 2), z = rnorm(1000, 1),
err = rnorm(1000, 0, 1), y = 2*x+1+err)
summary(lm(y~x+0, data=test))
summary(lm(y~x+z+0, data=test))
sum(test$x*test$y)/sum(test$x^2)
test <- tibble(x = rnorm(10000, 2), z = rnorm(10000, 1),
err = rnorm(10000, 0, 1), y = 2*x+1+err)
summary(lm(y~x+0, data=test))
summary(lm(y~x+z+0, data=test))
cor(test)
test <- tibble(x = rnorm(10000, 2), z = rnorm(10000, 1),
err = rnorm(10000, 0, 1), y = 2*x-y+1+err)
test <- tibble(x = rnorm(10000, 2), z = rnorm(10000, 1),
err = rnorm(10000, 0, 1), y = 2*x-z+1+err)
summary(lm(y~x+0, data=test))
summary(lm(y~x+z+0, data=test))
cor(test)
test <- tibble(x = rnorm(10000, 2), z = rnorm(10000, 1),
err = rnorm(10000, 0, 1), y = 2*x-z+1+err)
summary(lm(y~x+0, data=test))
test <- tibble(x = rnorm(10000, 2), z = rnorm(10000, 1),
err = rnorm(10000, 0, 1), y = 2*x-z-1+err)
summary(lm(y~x+0, data=test))
summary(lm(y~x+z+0, data=test))
sum(test$x+test$z)
sum(rnorm(1000)*rnorm(1000))
sum(rnorm(1000,1)*rnorm(1000))
sum(rnorm(1000,2)*rnorm(1000))
sum(rnorm(10000,2)*rnorm(10000))
sum(rnorm(10000,2)*rnorm(10000))
sum(rnorm(10000,2)*rnorm(10000))
sum(rnorm(10000,2)*rnorm(10000))
test <- tibble(x = runif(10000), z = runif(10000)) %>%
mutate(x = x-mean(x))
sum(test$x*test*z)
test <- tibble(x = runif(10000), z = runif(10000)) %>%
mutate(x = x-mean(x))
sum(test$x*test$z)
test <- tibble(x = runif(10000), z = runif(10000)) %>%
mutate(x = x-mean(x), z = z-mean(z))
sum(test$x*test$z)
test <- tibble(x = rnorm(10000), z = rnorm(10000)) %>%
mutate(x = x-mean(x), z = z-mean(z))
sum(test$x*test$z)
cor(test)
test <- tibble(x = rnorm(10000), z = rnorm(10000)) %>%
mutate(x = x-mean(x), z = z-mean(z))
sum(test$x*test$z)/10000
test <- tibble(x = rnorm(10000), z = rnorm(10000)) %>%
mutate(x = x-mean(x))
sum(test$x*test$z)/10000
test <- tibble(x = runif(10000), z = runif(10000)) %>%
mutate(x = x-mean(x), z = z-mean(z))
sum(test$x*test$z)/10000
library(tidyverse)
dta <- read_csv("~/Data/project121/c_business.csv")
dta
View(dta)
dta <- read_csv("~/Data/project121/c_business.csv") %>%
select(city, state, latitude, longitude, review_count) %>%
filter(review_count >50)
dta
library(maps)
install.packages("mapdata")
library(mapdata)
?mapdata
?maps
?map_data
usa <- map_data("usa")
ggplot(usa) + geom_polygon(aes(x=long, y = lat, group = group)) +
coord_fixed(1.3)
ggplot(usa) + geom_polygon(aes(x=long, y = lat, group = group)) +
coord_fixed(1.3) + geom_point(aes(longitude, latitude), data=dta)
ggplot(usa) + geom_polygon(aes(x=long, y = lat, group = group)) +
coord_fixed(1.3) + geom_point(aes(longitude, latitude), color="red", data=dta)
ggplot(usa) + geom_polygon(aes(x=long, y = lat, group = group), fill="gray") +
coord_fixed(1.3) + geom_point(aes(longitude, latitude), color="red", data=dta)
ggplot(usa) + geom_polygon(aes(x=long, y = lat, group = group), fill="gray", color="black") +
coord_fixed(1.3) + geom_point(aes(longitude, latitude), color="red", data=dta)
install.packages("ggmap")
library(ggmap)
sbbox <- make_bbox(lon = dta$longitude, lat = dta$latitude, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google")
ggmap(sq_map) + geom_point(data = dta, mapping = aes(x = longitude, y = latitude), color = "red")
canada <- map_data("worldHires", "Canada")
ggplot() + geom_polygon(aes(long, lat, group = group), data = usa,
fill = "white", color = "black") +
geom_polygon(aes(long, lat, group = group), data = canada,
fill = "white", color = "black") +
geom_point(aes(longitude, latitude), color = "red", data = dta)
ggplot() + geom_polygon(aes(long, lat, group = group), data = usa,
fill = "white", color = "black")
)
)
)
ggplot() + geom_polygon(aes(long, lat, group = group), data = usa,fill = "white", color = "black")
ggplot() + geom_polygon(aes(long, lat, group=group), data=usa, fill="white", color="black") +
geom_polygon(aes(long, lat, group=group), data=canada, fill="white", color="black")
rm(sbbox)
rm(sq_map)
summary(dta)
mlat <- c(43,46); mlon <- c(-80,-73)
usa <- map_data("usa") %>% filter(lat %in% mlat, lon %in% mlon)
canada <- map_data("worldHires", "Canada") %>% filter(lat %in% mlat, lon %in% mlon)
ggplot() + geom_polygon(aes(long, lat, group=group), data=usa, fill="white", color="black") +
geom_polygon(aes(long, lat, group=group), data=canada, fill="white", color="black")
mlat <- c(43,46); mlon <- c(-80,-73)
usa <- map_data("usa") %>% filter(lat %in% mlat, long %in% mlon)
canada <- map_data("worldHires", "Canada") %>% filter(lat %in% mlat, long %in% mlon)
ggplot() + geom_polygon(aes(long, lat, group=group), data=usa, fill="white", color="black") +
geom_polygon(aes(long, lat, group=group), data=canada, fill="white", color="black")
usa <- map_data("usa") %>% filter(lat %in% mlat, long %in% mlon)
canada <- map_data("worldHires", "Canada") %>% filter(lat %in% mlat, long %in% mlon)
ggplot() + geom_polygon(aes(long, lat, group=group), data=usa, fill="white", color="black") +
geom_polygon(aes(long, lat, group=group), data=canada, fill="white", color="black")
usa <- map_data("usa")
usa
?between
usa <- map_data("usa") %>% filter(between(lat,43,46), between(long,-80,-73))
canada <- map_data("worldHires", "Canada") %>%
filter(between(lat,43,46), between(long,-80,-73))
ggplot() + geom_polygon(aes(long, lat, group=group), data=usa, fill="white", color="black") +
geom_polygon(aes(long, lat, group=group), data=canada, fill="white", color="black")
canada
usa <- map_data("usa"); canada <- map_data("worldHires", "Canada")
ggplot() + geom_polygon(aes(long, lat, group=group), data=usa, fill="white", color="black") +
geom_polygon(aes(long, lat, group=group), data=canada, fill="white", color="black") +
coord_cartesian(xlim = c(-80,-73), ylim = c(43,46)) + coord_fixed(1.3)
ggplot() + geom_polygon(aes(long, lat, group=group), data=usa, fill="white", color="black") +
geom_polygon(aes(long, lat, group=group), data=canada, fill="white", color="black") +
xlim(-80,-73) + ylim(43,46) + coord_fixed(1.3)
library(ggmap)
area = get_map(location = c(lon = men(dta$longitude), lat = mean(dta$latitude)),
zoom = 11, maptype = 'roadmap')
area <- get_map(location = c(lon = mean(dta$longitude), lat = mean(dta$latitude)),
zoom = 11, maptype = 'roadmap')
amap <- ggmap(area)
install.packages("devtools")
library(devtools)
devtools::install_github("dkahle/ggmap")
library(tidyverse)
library(ggmap)
dta <- read_csv("~/Data/project121/c_business.csv") %>%
select(city, state, latitude, longitude, review_count) %>%
filter(review_count >50)
area <- get_map(location = c(lon = mean(dta$longitude), lat = mean(dta$latitude)),
zoom = 11, maptype = 'roadmap')
amap <- ggmap(area)
amap
area <- get_map(location = c(lon = mean(dta$longitude), lat = mean(dta$latitude)),
zoom = 5, maptype = 'roadmap')
amap <- ggmap(area)
amap
area <- get_map(location = c(lon = mean(dta$longitude), lat = mean(dta$latitude)),
zoom = 7, maptype = 'roadmap')
amap <- ggmap(area)
amap
area <- get_map(location = c(lon = mean(dta$longitude), lat = mean(dta$latitude)),
zoom = 6, maptype = 'roadmap')
amap <- ggmap(area)
amap
cabox <- make_bbox(lon = dta$longitude, lat = dta$latitude, f = .1)
ca_map <- get_map(location = cabox, maptype = "satellite", source = "google")
ggmap(ca_map) + geom_point(data=dta, mapping=aes(x=longitude, y=latitude), color="red")
ggmap(ca_map) + geom_point(data=dta, mapping=aes(x=longitude, y=latitude), color="red", size=5)
ggmap(ca_map) + geom_point(mapping=aes(x=dta$longitude, y=dta$latitude), color="red", size=5)
llmeans <- sapply(dta[,3:4], mean)
ca_map <- get_map(location = llmeans, maptype = "satellite", source = "google", zoom=7)
ggmap(ca_map) + geom_point(mapping=aes(x=dta$longitude, y=dta$latitude), color="red", size=5)
ggmap(ca_map) + geom_point(data=dta, mapping=aes(x=longitude, y=latitude), color="red", size=5)
ca_map <- get_map(location = llmeans, maptype = "satellite", source = "google", zoom=12)
ggmap(ca_map) + geom_point(data=dta, mapping=aes(x=longitude, y=latitude), color="red", size=5)
ca_map <- get_map(location = llmeans, maptype = "satellite", source = "google", zoom=5)
ggmap(ca_map) + geom_point(data=dta, mapping=aes(x=longitude, y=latitude), color="red", size=5)
ggmap(ca_map)
ca_map <- get_map(location = "ontario", maptype = "satellite", source = "google", zoom=5)
ggmap(ca_map)
ca_map <- get_map(location = "kingston, ontario", maptype = "satellite", source = "google", zoom=5)
ggmap(ca_map)
ca_map <- get_map(location = "kingston, ontario", maptype = "satellite",
source = "google", zoom=6)
ggmap(ca_map)
?get_map
ca_map <- get_map(location = "kingston, ontario", maptype = "roadmap",
source = "google", zoom=6)
ggmap(ca_map)
ggmap(ca_map) + geom_point(aes(longitude, latitude), data=dta, color="red")
ggmap(ca_map) + geom_point(aes(longitude, latitude), data=dta, color="red", slpha=.5)
ggmap(ca_map) + geom_point(aes(longitude, latitude), data=dta, color="red", alpha=.5)
ggmap(ca_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.5)
ca_map <- get_map(location = "toronto", maptype = "roadmap",
source = "google", zoom=9)
ggmap(ca_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.5)
ca_map <- get_map(location = "toronto", maptype = "roadmap",
source = "google", zoom=8)
ggmap(ca_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.5)
ca_map <- get_map(location = "toronto", maptype = "roadmap",
source = "google", zoom=7.5)
ca_map <- get_map(location = "toronto", maptype = "roadmap",
source = "google", zoom=7)
ggmap(ca_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.3)
ca_map <- get_map(location = "toronto", maptype = "roadmap",
source = "google", zoom=8)
ggmap(ca_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.3)
ca_map <- get_map(location = "toronto", maptype = "roadmap",
source = "google", zoom=9)
ggmap(ca_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.3)
ggmap(ca_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.1)
ggmap(ca_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.1) +
theme_void()
mt_map <- get_map(location = "montreal", maptype = "roadmap",
source = "google", zoom=9)
ggmap(mt_map) + theme_void()
ggmap(mt_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.1) +
theme_void()
mt_map <- get_map(location = "montreal", maptype = "roadmap",
source = "google", zoom=10)
ggmap(mt_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.1) +
theme_void()
mt_map <- get_map(location = "montreal", maptype = "roadmap",
source = "google", zoom=11)
ggmap(mt_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.1) +
theme_void()
mt_map <- get_map(location = "montreal", maptype = "roadmap",
source = "google", zoom=12)
ggmap(mt_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.1) +
theme_void()
mt_map <- get_map(location = "montreal", maptype = "roadmap",
source = "google", zoom=11)
ggmap(mt_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.5) +
theme_void()
on_map <- get_map(location = "toronto", maptype = "roadmap",
source = "google", zoom=9)
ggmap(on_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.1) +
theme_void()
setwd("~/GitHub/rest_recs/Other_files")
ggmap(on_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.1) +
theme_void()
mt_map <- get_map(location = "montreal", maptype = "roadmap",
source = "google", zoom=11)
ggmap(mt_map) + geom_jitter(aes(longitude, latitude), data=dta, color="red", alpha=.5) +
theme_void()
